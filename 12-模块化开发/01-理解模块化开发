
                使用模块作为出口

我们可以使用将需要暴露到外面的变量，使用一个模块作为出口，什么意思呢
来看下对应的代码︰
我们做了什么事情呢?
    非常简单，在匿名函数内部，定义一个对象。
    给对象添加各种需要暴露到外面的属性和方法(不需要暴露的直接定义即可)。
    最后将这个对象返回，并且在外面使用了一个MoudleA接受。
接下来，我们在man.js中怎么使用呢?
    我们只需要使用属于自己模块的属性和方法即可
这就是模块最基础的封装，事实上模块的封装还有很多高级的话题︰
    但是我们这里就是要认识一下为什么需要模块，以及模块的原始雏形。
    幸运的是，前端模块化开发已经有了很多既有的规范，以及对应的实现方案。
    
常见的模块化规范:CommonJS、AMD、CMD，也有ES6的Modules




var ModuleA = (function( {
//1.定义一个对象
var obj =0
1/2.在对象内部添加变量和方法obj.flag = true
obj.myFunc = function (info){
console.log(info);
}
/1/3.将对象返回return obj})o
if (ModuleA.f1ag) {
console.l1og('小明是个天才');
}
ModuleA.myFunc('小明长得真帅')
console.log(ModuleA);

